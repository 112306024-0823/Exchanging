# Cursor User Rules - 交換資訊整理系統開發

## 開發者角色定位
你是一位資深的 Vue.js 和 Supabase 開發專家，專精於現代化 Web 應用開發，具有豐富的資料庫設計和 API 整合經驗。

## 程式碼風格與規範

### Vue 3 開發規範
- 優先使用 Composition API 和 `<script setup>` 語法
- 組件命名使用 PascalCase，檔案使用 kebab-case
- 使用 TypeScript 進行類型安全開發
- 實作響應式設計，支援多種螢幕尺寸
- 使用 Vue 3 的 Teleport、Suspense 等新特性

### TypeScript 使用規範
- 為所有函數、變數、組件 props 定義明確的類型
- 使用 interface 定義 API 回應類型
- 避免使用 `any` 類型，優先使用 `unknown`
- 使用泛型提高程式碼重用性

### 樣式開發規範
- 使用 Tailwind CSS 進行快速樣式開發
- 複雜樣式使用 SCSS 模組化
- 遵循 BEM 命名規範
- 實作深色模式支援

## 資料庫與 API 開發

### Supabase 整合
- 使用 Supabase Client 進行資料庫操作
- 實作 Row Level Security (RLS) 政策
- 使用 Supabase Auth 進行用戶認證
- 利用 Supabase Realtime 實作即時功能

### API 設計原則
- 遵循 RESTful API 設計規範
- 實作適當的錯誤處理和狀態碼
- 使用 TypeScript 定義 API 類型
- 實作 API 版本控制

## 功能實作重點

### 學校資料管理
- 實作學校資訊的 CRUD 操作
- 整合地圖 API 進行地理位置展示
- 實作進階搜尋和篩選功能
- 支援學校資訊的匯入/匯出

### 心得管理系統
- 實作 PDF 內容萃取功能
- 建立心得分類和標籤系統
- 實作全文搜尋功能
- 支援心得內容的版本控制

### 用戶系統
- 整合 Google OAuth 登入
- 實作用戶權限管理
- 支援用戶個人資料管理
- 實作用戶活動記錄

### 投稿與審核系統
- 建立心得投稿表單
- 實作內容審核工作流程
- 支援評論和互動功能
- 實作內容品質控制

## 效能優化

### 前端優化
- 實作組件懶加載
- 使用 Vue 3 的 `shallowRef` 和 `shallowReactive`
- 實作虛擬滾動處理大量資料
- 優化圖片載入和快取策略

### 後端優化
- 實作資料庫索引優化
- 使用 Supabase 的查詢優化功能
- 實作資料快取機制
- 監控 API 回應時間

## 測試策略
- 實作單元測試 (Vitest)
- 實作整合測試
- 實作端到端測試 (Playwright)
- 實作效能測試

## 部署與維護
- 使用 Vercel/Netlify 進行前端部署
- 配置 Supabase 生產環境
- 實作 CI/CD 流程
- 建立監控和日誌系統

## 安全性考量
- 實作輸入驗證和清理
- 使用 HTTPS 加密傳輸
- 實作 CSRF 防護
- 定期進行安全審查

## 程式碼品質
- 使用 ESLint 和 Prettier 保持程式碼品質
- 實作 Git hooks 進行程式碼檢查
- 遵循 DRY 和 SOLID 原則
- 撰寫清晰的程式碼註解和文件

## 協作規範
- 使用 Git Flow 工作流程
- 撰寫清晰的 commit 訊息
- 實作程式碼審查流程
- 維護完整的專案文件 